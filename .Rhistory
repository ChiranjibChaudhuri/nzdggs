},
'6h'={
diff <- floor(as.numeric(difftime(myDate,private$start,units="days"))*4)
},
'12h'={
diff <- floor(as.numeric(difftime(myDate,private$start,units="days"))*2)
},
'd'={
diff <- floor(as.numeric(difftime(myDate,private$start,units="days"))*1)
},
'w'={
diff <- floor(as.numeric(difftime(private$start,myDate,units="week")))
},
'm'={
diff <- mDiff
},
'1y'={
diff <- floar(mDiff/(12*1))
},
'10y'={
diff <- (floar(mDiff/(12*10)))
},
'50y'={
diff <- (floar(mDiff/(12*50)))
},
'100y'={
diff <- (floar(mDiff/(12*100)))
},
'500y'={
diff <- (floar(mDiff/(12*500)))
},
'1000y'={
diff <- (floar(mDiff/(12*1000)))
}
)
result<- pf$start + diff
return(as.integer(result))
}
},
getP=function(){
return(private$p)
},
getLeapYears=function(){
return(private$leapYears)
},
POTToDateTime=function(value){
pf<-private$p[which(private$p$start <value &&private$p$end ),]
}
) ,
private = list(
resolution=c('1000y','500y','100y','50y','10y','1y','m','w','d','12h','6h','3h','h','min','s'),
p=NA,
start=NA,
end=NA,
leapYears=NA,
getLeapYear=function(start,end){
return (private$leapYearsBefore(end) - private$leapYearsBefore(start + 1))
},
leapYearsBefore=function(year){
year--
return (round((year / 4) - (year / 100) + (year / 400)))
},
getElapsedMonths =  function(ed, sd) {
#ed <- as.POSIXlt(end_date)
#sd <- as.POSIXlt(start_date)
12 * (ed$year - sd$year) + (ed$mon - sd$mon)
}
)
)
POT<-TimeClass$new()
POT$setBoundLimit(strptime( '01-01-1000 00:00:00', "%d-%m-%Y %H:%M:%S"),strptime( '01-01-3000 00:00:00', "%d-%m-%Y %H:%M:%S"))
POT$getP()
a <- POT$getP()
a
a$ratio <- c(1,2,3)
a
a$ratio <- c(2,5,2,5,10,12,4,7)
a$ratio <- c(2,5,2,5,10,12,4,7)
a$ratio1 <- c(2,5,2,5,10,12,4,7)
a$ratio <- c(2,5,2,5,10,12,4,7,0,0,0,0,0,0,0)
a
range(2,5)
range(1,5)
seq(1, 100, by=2)
for (i in range (1,6)){
print(i)
}
for (i in range(1,6)){
print(i)
}
for (i in seq(1,6)){
print(i)
}
library(dplyr)
View(a)
i=3
result <- a %>%
filter( start<i & i<end)
a[a$start > i | a$end > i,]
a[a$start < i | a$end > i,]
a[a$start < i & a$end > i,]
a[a$start <= i & a$end => i,]
a[(a$start < i | a$start = i)& a$end => i,]
a[(a$start < i | a$start == i)& a$end => i,]
a[(a$start < i | a$start is i)& a$end => i,]
a[(a$start <= i)& a$end => i,]
a[(a$start == i)& a$end => i,]
a[(a$start < i)& a$end => i,]
a[(a$start <= i)& a$end > i,]
a[(a$start <= i)& a$end >= i,]
f <- a[(a$start <= i)& a$end >= i,]
f
a$rowid <- seq(i,15)
a$rowid <- seq(1,15)
f <- a[(a$start <= i)& a$end >= i,]
f
a[1]
a[2]
a[1,]
ch <- a[(f$rowid+1),]
ch
f
ch_range <- (ch$end- (ch$start-1))
ch_classes <- ch_range/f$ratio
f_range <- (f$end- (f$start-1))
ch_classes <- ch_range/f_range
seq(ch$start,ch$end,by=5)
j=7
rr <- seq(j,j+ch_classes)
rr
p <- i
rr$p <- p
res$p <- p
res <- seq(j,j+ch_classes)
res$p <- p
res$p <- c(p)
View(res)
View(res)
res <- seq(j,j+ch_classes)
data.frame(res, 5)
for(j in seq(ch$start,ch$end,by=5)){
res <- seq(j,j+ch_classes)
result <- data.frame(res, p,f$res)
p <- p+1
write.csv(result,paste("D:\\UserData\\Majid\\Desktop\\New folder",j,".csv",sep = ""))
}
p <- i
for(j in seq(ch$start,ch$end,by=5)){
child <- seq(j,j+ch_classes)
result <- data.frame(child, p,f$res)
p <- p+1
write.csv(result,paste("D:\\UserData\\Majid\\Desktop\\New folder\\",j,".csv",sep = ""),rows.name=F)
}
for(j in seq(ch$start,ch$end,by=5)){
child <- seq(j,j+ch_classes)
result <- data.frame(child, p,f$res)
p <- p+1
write.csv(result,paste("D:\\UserData\\Majid\\Desktop\\New folder\\",j,".csv",sep = ""),row.name=F)
}
p <- i
for(j in seq(ch$start,ch$end,by=5)){
child <- seq(j,j+ch_classes)
result <- data.frame(child, p,f$res)
p <- p+1
write.csv(result,paste("D:\\UserData\\Majid\\Desktop\\New folder\\",j,".csv",sep = ""))
}
for (i in a$start){
f <- a[(a$start <= i)& a$end >= i,]
f_range <- (f$end- (f$start-1))
ch <- a[(f$rowid+1),]
ch_range <- (ch$end- (ch$start-1))
ch_classes <- ch_range/f_range
p <- i
for(j in seq(ch$start,ch$end,by=5)){
child <- seq(j,j+ch_classes)
result <- data.frame(child, p,f$res)
p <- p+1
write.csv(result,paste("D:\\UserData\\Majid\\Desktop\\New folder\\",j,".csv",sep = ""))
}
}
a$start
i in a$start
for (i in a$start){
print(i)
}
for (i in a$start){
f <- a[(a$start <= i)& a$end >= i,]
f_range <- (f$end- (f$start-1))
ch <- a[(f$rowid+1),]
ch_range <- (ch$end- (ch$start-1))
ch_classes <- ch_range/f_range
p <- i
for(j in seq(ch$start,ch$end,by=5)){
child <- seq(j,j+ch_classes)
result <- data.frame(child, p,f$res)
p <- p+1
write.csv(result,paste("D:\\UserData\\Majid\\Desktop\\New folder\\",j,".csv",sep = ""))
}
}
library(dplyr)
library(devtools)
install_github("am2222/nzdggs")
install_github("am2222/nzdggs")
library(devtools)
install_github("am2222/nzdggs")
remove.packages("nzdggs")
install_github("am2222/nzdggs")
library(R6)
library(RODBC)
ImporterClass <- R6::R6Class("DataImporter",
public = list(
debug = FALSE,
#' DSN_NAME
#'
#' @param DSN_NAME
#'
#' @return
#' @export
#'
#' @examples
setDSN = function(DSN_NAME){
private$odbcConnection <- odbcConnect(DSN_NAME)
},
#'
#' @param params list of parameters
#' @param append wheather append parameter to existing list or replace it
#'
#' @return
#' @export
#'
#' @examples
setExternalTableParams = function(params,append=FALSE){
if(append){
private$externalTableParams <- append(private$externalTableParams, params)
}else{
private$externalTableParams <- params
}
},
#'
#' @param tableName name of final table
#' @param finaltablecolumns column list of final table. this is used to make a new table it must be a list
#' sasme as the following list finaltablecolumns=list(name=c('dggid','value'),type=c('bigint','float'))
#' @param inputfilecolumns column list of text files, it must be as following list  inputfilecolumns=list(name=c('id','value','dggid'),type=c('varchar(100)','varchar(100)','varchar(100)'))
#' @param insertcolumns The type convertion of tables when copying from external table to distanation table. use the following example insertcolumns='CAST(dggid AS bigint),CAST(value AS float )', NOTE: the order of columns are same as @param finaltablecolumns list and column names are as @param inputfilecolumns
#' @param createTable = FALSE If true it drops previus table if exists  and makes a new table
#'
#' @return
#' @export
#'
#' @examples
setTableDetails = function(tableName, finaltablecolumns, inputfilecolumns, insertcolumns,
createTable = FALSE){
colList <-toString(unlist(do.call(Map, c(f = paste, unname(finaltablecolumns))), use.names = FALSE))
private$tableName <- tableName
private$createTable <- createTable
private$finaltablecolumns <- finaltablecolumns
private$inputfilecolumns <- inputfilecolumns
private$insertcolumns <- insertcolumns
if(private$createTable){
createQuery <- paste("CREATE TABLE", tableName, " (", colList ,"); ")
deleteTableQuery <- paste("drop table ", tableName, " if exists;")
print(paste("createQuery",createQuery,"drop",deleteTableQuery))
sqlQuery(private$odbcConnection, deleteTableQuery, errors = TRUE)
sqlQuery(private$odbcConnection, createQuery, errors = TRUE)
}
},
#'
#' @param path folder name
#' @param extention = "*.csv" file extentions in folder
#'
#' @return
#' @export
#'
#' @examples
importDirectory = function(path,  extention="*.csv"){
private$file.names <- dir(path, pattern = extention)
private$directory <- path
length <-length(private$file.names)
count = 0
for (f in file.names){
count = count +1
print(paste(count, "of",length,"Adding File name",basename(f),sep = ""))
self$importFile(paste(path,basename(f),sep = "") )
# print(paste(path, fsep = '\\', f, sep = ""))
}
},
#'
#' @param filename file name
#'
#' @return
#' @export
#'
#' @examples
importFile = function(filename){
logDir = dirname(file.path(filename))
sql= 'drop table testexternaltbl1 if exists; ';
sqlQuery(private$odbcConnection, sql, errors = TRUE)
cols <- toString(unlist(do.call(Map, c(f = paste, unname( private$inputfilecolumns))), use.names = FALSE))
params <- paste(unlist(do.call(Map, c(f = paste, unname( private$externalTableParams ))), use.names = FALSE),collapse = " ")
string =paste("drop table externalname_",private$tableName,",testexternaltbl1_",private$tableName," if exists; create external table externalname_",private$tableName," ( ",
cols ,"  ) USING (  DATAOBJECT(",paste("'",filename,"'",sep = ""),") REMOTESOURCE 'odbc' ",params," LOGDIR ",paste("'",logDir,"'",sep = "")," );create table testexternaltbl1_",private$tableName," as select * from externalname_",private$tableName,"; ")
# "QUOTEDVALUE 'DOUBLE'  "
insert_sql = paste("INSERT INTO ",private$tableName," (",gsub('([[:punct:]])|\\s+',',',toString(unlist(do.call(Map, c(f = paste, unname(private$finaltablecolumns$name))), use.names = FALSE)))," ) SELECT ",private$insertcolumns," FROM testexternaltbl1_",private$tableName,";",sep="")
print(paste("ExternalTableSql",string))
print(paste("InsertSQL",insert_sql))
return("ad")
sqlQuery(private$odbcConnection, string, errors = TRUE)
count<-sqlQuery(private$odbcConnection,paste("select count(*) from  testexternaltbl1_",private$tableName,sep = ""), errors = TRUE)
print(paste("NumberOFRecordsInExternal",count))
countTableNameBefore<-sqlQuery(private$odbcConnection, paste("select count(*) from",private$tableName), errors = TRUE)
print(paste("CountBefore",countTableNameBefore))
sqlQuery(private$odbcConnection, paste("delete FROM testexternaltbl1_",private$tableName," where dggid='DGGID'",sep=""), errors = TRUE)
sqlQuery(private$odbcConnection, insert_sql, errors = TRUE)
countTableNameAfter<-sqlQuery(private$odbcConnection, paste("select count(*) from",private$tableName), errors = TRUE)
print(paste("countAfter",countTableNameAfter))
# if (debug){
print(paste('log Directory is',logDir))
print(paste("ExternalTableSql",string))
print(paste("InsertSQL",insert_sql))
# }
sqlQuery(private$odbcConnection, paste("drop table externalname_",private$tableName,",testexternaltbl1_",private$tableName," if exists;",sep = ""), errors = F)
}
),
private = list(  odbcConnection = NA,
file.names = NA,
directory = NA,
tableName = NA,
createTable= FALSE,
finaltablecolumns = NA,
inputfilecolumns = NA,
externalTableParams = list(name=c('SKIPROWS','QUOTEDVALUE','DELIMITER','NullValue'),type=c('1',"'DOUBLE'","','","'NA'")),
insertcolumns = NA)
)
importer <- ImporterClass$new()
importer$setDSN(DSN)
DSN <- "PG_SQL"
importer$setDSN(DSN)
importer$setTableDetails(table_name,finaltablecolumns=list(name=c('dggid','value','key','tid'),type=c('bigint',value_type,'varchar(100)','integer')),
inputfilecolumns=list(name=c('dggid','key','value','tid'),
type=c('varchar(100)','varchar(100)','varchar(100)','varchar(100)')),
insertcolumns=paste('CAST(dggid AS bigint),CAST(value AS ',value_type,' ),key,CAST(tid as integer)',sep=""),
createTable = append)
value_type <- "double"
importer$setTableDetails(table_name,finaltablecolumns=list(name=c('dggid','value','key','tid'),type=c('bigint',value_type,'varchar(100)','integer')),
inputfilecolumns=list(name=c('dggid','key','value','tid'),
type=c('varchar(100)','varchar(100)','varchar(100)','varchar(100)')),
insertcolumns=paste('CAST(dggid AS bigint),CAST(value AS ',value_type,' ),key,CAST(tid as integer)',sep=""),
createTable = append)
table_name <- "test"
importer$setTableDetails(table_name,finaltablecolumns=list(name=c('dggid','value','key','tid'),type=c('bigint',value_type,'varchar(100)','integer')),
inputfilecolumns=list(name=c('dggid','key','value','tid'),
type=c('varchar(100)','varchar(100)','varchar(100)','varchar(100)')),
insertcolumns=paste('CAST(dggid AS bigint),CAST(value AS ',value_type,' ),key,CAST(tid as integer)',sep=""),
createTable = append)
append <- T
importer$setTableDetails(table_name,finaltablecolumns=list(name=c('dggid','value','key','tid'),type=c('bigint',value_type,'varchar(100)','integer')),
inputfilecolumns=list(name=c('dggid','key','value','tid'),
type=c('varchar(100)','varchar(100)','varchar(100)','varchar(100)')),
insertcolumns=paste('CAST(dggid AS bigint),CAST(value AS ',value_type,' ),key,CAST(tid as integer)',sep=""),
createTable = append)
value_type <- "integer"
importer$setTableDetails(table_name,finaltablecolumns=list(name=c('dggid','value','key','tid'),type=c('bigint',value_type,'varchar(100)','integer')),
inputfilecolumns=list(name=c('dggid','key','value','tid'),
type=c('varchar(100)','varchar(100)','varchar(100)','varchar(100)')),
insertcolumns=paste('CAST(dggid AS bigint),CAST(value AS ',value_type,' ),key,CAST(tid as integer)',sep=""),
createTable = append)
directory <- "D:\\UserData\\Majid\\Desktop\\test\\"
importer$importDirectory(directory)
ImporterClass <- R6::R6Class("DataImporter",
public = list(
debug = FALSE,
#' DSN_NAME
#'
#' @param DSN_NAME
#'
#' @return
#' @export
#'
#' @examples
setDSN = function(DSN_NAME){
private$odbcConnection <- odbcConnect(DSN_NAME)
},
#'
#' @param params list of parameters
#' @param append wheather append parameter to existing list or replace it
#'
#' @return
#' @export
#'
#' @examples
setExternalTableParams = function(params,append=FALSE){
if(append){
private$externalTableParams <- append(private$externalTableParams, params)
}else{
private$externalTableParams <- params
}
},
#'
#' @param tableName name of final table
#' @param finaltablecolumns column list of final table. this is used to make a new table it must be a list
#' sasme as the following list finaltablecolumns=list(name=c('dggid','value'),type=c('bigint','float'))
#' @param inputfilecolumns column list of text files, it must be as following list  inputfilecolumns=list(name=c('id','value','dggid'),type=c('varchar(100)','varchar(100)','varchar(100)'))
#' @param insertcolumns The type convertion of tables when copying from external table to distanation table. use the following example insertcolumns='CAST(dggid AS bigint),CAST(value AS float )', NOTE: the order of columns are same as @param finaltablecolumns list and column names are as @param inputfilecolumns
#' @param createTable = FALSE If true it drops previus table if exists  and makes a new table
#'
#' @return
#' @export
#'
#' @examples
setTableDetails = function(tableName, finaltablecolumns, inputfilecolumns, insertcolumns,
createTable = FALSE){
colList <-toString(unlist(do.call(Map, c(f = paste, unname(finaltablecolumns))), use.names = FALSE))
private$tableName <- tableName
private$createTable <- createTable
private$finaltablecolumns <- finaltablecolumns
private$inputfilecolumns <- inputfilecolumns
private$insertcolumns <- insertcolumns
if(private$createTable){
createQuery <- paste("CREATE TABLE", tableName, " (", colList ,"); ")
deleteTableQuery <- paste("drop table ", tableName, " if exists;")
print(paste("createQuery",createQuery,"drop",deleteTableQuery))
sqlQuery(private$odbcConnection, deleteTableQuery, errors = TRUE)
sqlQuery(private$odbcConnection, createQuery, errors = TRUE)
}
},
#'
#' @param path folder name
#' @param extention = "*.csv" file extentions in folder
#'
#' @return
#' @export
#'
#' @examples
importDirectory = function(path,  extention="*.csv"){
private$filenames <- dir(path, pattern = extention)
private$directory <- path
length <-length(private$filenames)
count = 0
for (f in private$filenames){
count = count +1
print(paste(count, "of",length,"Adding File name",basename(f),sep = ""))
self$importFile(paste(path,basename(f),sep = "") )
# print(paste(path, fsep = '\\', f, sep = ""))
}
},
#'
#' @param filename file name
#'
#' @return
#' @export
#'
#' @examples
importFile = function(filename){
logDir = dirname(file.path(filename))
sql= 'drop table testexternaltbl1 if exists; ';
sqlQuery(private$odbcConnection, sql, errors = TRUE)
cols <- toString(unlist(do.call(Map, c(f = paste, unname( private$inputfilecolumns))), use.names = FALSE))
params <- paste(unlist(do.call(Map, c(f = paste, unname( private$externalTableParams ))), use.names = FALSE),collapse = " ")
string =paste("drop table externalname_",private$tableName,",testexternaltbl1_",private$tableName," if exists; create external table externalname_",private$tableName," ( ",
cols ,"  ) USING (  DATAOBJECT(",paste("'",filename,"'",sep = ""),") REMOTESOURCE 'odbc' ",params," LOGDIR ",paste("'",logDir,"'",sep = "")," );create table testexternaltbl1_",private$tableName," as select * from externalname_",private$tableName,"; ")
# "QUOTEDVALUE 'DOUBLE'  "
insert_sql = paste("INSERT INTO ",private$tableName," (",gsub('([[:punct:]])|\\s+',',',toString(unlist(do.call(Map, c(f = paste, unname(private$finaltablecolumns$name))), use.names = FALSE)))," ) SELECT ",private$insertcolumns," FROM testexternaltbl1_",private$tableName,";",sep="")
print(paste("ExternalTableSql",string))
print(paste("InsertSQL",insert_sql))
return("ad")
sqlQuery(private$odbcConnection, string, errors = TRUE)
count<-sqlQuery(private$odbcConnection,paste("select count(*) from  testexternaltbl1_",private$tableName,sep = ""), errors = TRUE)
print(paste("NumberOFRecordsInExternal",count))
countTableNameBefore<-sqlQuery(private$odbcConnection, paste("select count(*) from",private$tableName), errors = TRUE)
print(paste("CountBefore",countTableNameBefore))
sqlQuery(private$odbcConnection, paste("delete FROM testexternaltbl1_",private$tableName," where dggid='DGGID'",sep=""), errors = TRUE)
sqlQuery(private$odbcConnection, insert_sql, errors = TRUE)
countTableNameAfter<-sqlQuery(private$odbcConnection, paste("select count(*) from",private$tableName), errors = TRUE)
print(paste("countAfter",countTableNameAfter))
# if (debug){
print(paste('log Directory is',logDir))
print(paste("ExternalTableSql",string))
print(paste("InsertSQL",insert_sql))
# }
sqlQuery(private$odbcConnection, paste("drop table externalname_",private$tableName,",testexternaltbl1_",private$tableName," if exists;",sep = ""), errors = F)
}
),
private = list(  odbcConnection = NA,
filenames = NA,
directory = NA,
tableName = NA,
createTable= FALSE,
finaltablecolumns = NA,
inputfilecolumns = NA,
externalTableParams = list(name=c('SKIPROWS','QUOTEDVALUE','DELIMITER','NullValue'),type=c('1',"'DOUBLE'","','","'NA'")),
insertcolumns = NA)
)
importer <- ImporterClass$new()
importer$setDSN(DSN)
importer$setTableDetails(table_name,finaltablecolumns=list(name=c('dggid','value','key','tid'),type=c('bigint',value_type,'varchar(100)','integer')),
inputfilecolumns=list(name=c('dggid','key','value','tid'),
type=c('varchar(100)','varchar(100)','varchar(100)','varchar(100)')),
insertcolumns=paste('CAST(dggid AS bigint),CAST(value AS ',value_type,' ),key,CAST(tid as integer)',sep=""),
createTable = append)
importer$importDirectory(directory)
library(nzdggs)
remove.packages("nzdggs")
library(devtools)
install_github("am2222/nzdggs")
install_github("am2222/nzdggs")
library(devtools)
install_github("am2222/nzdggs")
remove.packages("nzdggs")
install_github("am2222/nzdggs")
library(nzdggs)
a <- T
if(a){print('ad')}
