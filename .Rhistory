f
}),sep = "    ", collapse = "    "), "")
}
else if (i %in% tags) {
key <- substr(i, 2, nchar(i))
results[[key]] <- paste(sapply(rd[[which(tags ==
i)[1]]], FUN = function(x) {
Rd2md:::parseTag(x, stripNewline = FALSE, link.ext = link.ext)
}), collapse = " ")
}
}
}
invisible(results)
}
Rd2markdown <- function (rdfile, outfile, append = FALSE)
{
append = as.logical(append)
if (length(append) != 1)
stop("Please provide append as single logical value.")
rdfile = as.character(rdfile)
if (length(rdfile) != 1)
stop("Please provide rdfile as single character value (file path with extension).")
outfile = as.character(outfile)
if (length(outfile) != 1)
stop("Please provide outfile as single character value (file path with extension).")
if (append) {
if (!file.exists(outfile))
stop("If append=TRUE, the outfile must exists already.")
}
file.ext <- "md"
link.ext <- "html"
section <- "#"
subsection <- "##"
section.sep <- "\n\n"
run.examples <- FALSE
rd <<- tools:::parse_Rd(rdfile)
results <- parseRd(rd)
if (all(c("name", "title") %in% names(results))) {
filename <- paste0(results$name, ".", file.ext)
results$filename <- filename
results$directory <- dirname(outfile)
cat("", file = outfile, append = append)
cat(paste0(section, " `", results$name, "`: ", results$title),
file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
for (i in sections.print[!sections.print %in% c("name",
"title")]) {
if (i %in% names(results)) {
if (i == "examples") {
cat(paste(subsection, "Examples"), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
a <<- results$examples
cat("```  ", paste(results$examples, collapse = "\n"),
"```", "  ", file = outfile, append = TRUE)
}
else if (i %in% c("usage")) {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat(paste0(results[[i]]), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
else if (i %in% c("arguments")) {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat("Argument      |Description\n", file = outfile,
append = TRUE)
cat("------------- |----------------\n", file = outfile,
append = TRUE)
cat(paste0("```", names(results[[i]]), "```",
"     |     ", results[[i]], collapse = "\n"),
file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
else {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat(results[[i]], file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
}
}
}
else {
warning("name and title are required. Not creating markdown file")
}
invisible(results)
}
Rd2markdown(rdfile = rdfile, outfile = outfile)
parseRd <- function (rd, link.ext)
{
if (!("Rd" %in% class(rd)))
stop("Please provide Rd object to parse.")
tags <- Rd2md:::RdTags(rd)
results <- list()
if (!("\\name" %in% tags)) {
return(results)
}
for (i in sections) {
if (i %in% tags) {
if (i == "\\arguments") {
args <- rd[[which(tags == "\\arguments")]]
args.tags <- Rd2md:::RdTags(args)
args <- args[which(args.tags == "\\item")]
params <- character()
for (i in seq_along(args)) {
param.name <- as.character(args[[i]][[1]])
param.desc <- paste(sapply(args[[i]][[2]],
FUN = function(x) {
Rd2md:::parseTag(x, link.ext = link.ext)
}), collapse = " ")
params <- c(params, param.desc)
names(params)[length(params)] <- param.name
}
results$arguments <- params
}
else if (i %in% c("\\usage")) {
results[["usage"]] <- paste0("```r\n", paste(sapply(rd[[which(tags ==
"\\usage")]], FUN = function(x) {
if (x[1] == "\n")
x[1] = ""
Rd2md:::parseTag(x, stripNewline = FALSE, stripWhite = FALSE,
stripTab = FALSE, link.ext = link.ext)
}), collapse = ""), "```\n")
}else if (i %in% c("\\examples")) {
results[["examples"]] <- sapply(rd[[which(tags ==
"\\examples")]], FUN = function(x) {
if (x[1] == "\n")
x[1] = ""
f <<- Rd2md:::parseTag(x, stripNewline = T, stripWhite = F,
stripTab = FALSE, link.ext = link.ext)
print(f)
f
})
}
else if (i %in% tags) {
key <- substr(i, 2, nchar(i))
results[[key]] <- paste(sapply(rd[[which(tags ==
i)[1]]], FUN = function(x) {
Rd2md:::parseTag(x, stripNewline = FALSE, link.ext = link.ext)
}), collapse = " ")
}
}
}
invisible(results)
}
Rd2markdown <- function (rdfile, outfile, append = FALSE)
{
append = as.logical(append)
if (length(append) != 1)
stop("Please provide append as single logical value.")
rdfile = as.character(rdfile)
if (length(rdfile) != 1)
stop("Please provide rdfile as single character value (file path with extension).")
outfile = as.character(outfile)
if (length(outfile) != 1)
stop("Please provide outfile as single character value (file path with extension).")
if (append) {
if (!file.exists(outfile))
stop("If append=TRUE, the outfile must exists already.")
}
file.ext <- "md"
link.ext <- "html"
section <- "#"
subsection <- "##"
section.sep <- "\n\n"
run.examples <- FALSE
rd <<- tools:::parse_Rd(rdfile)
results <- parseRd(rd)
if (all(c("name", "title") %in% names(results))) {
filename <- paste0(results$name, ".", file.ext)
results$filename <- filename
results$directory <- dirname(outfile)
cat("", file = outfile, append = append)
cat(paste0(section, " `", results$name, "`: ", results$title),
file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
for (i in sections.print[!sections.print %in% c("name",
"title")]) {
if (i %in% names(results)) {
if (i == "examples") {
cat(paste(subsection, "Examples"), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
a <<- results$examples
cat("```  ", paste(results$examples, collapse = "\n"),
"```", "  ", file = outfile, append = TRUE)
}
else if (i %in% c("usage")) {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat(paste0(results[[i]]), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
else if (i %in% c("arguments")) {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat("Argument      |Description\n", file = outfile,
append = TRUE)
cat("------------- |----------------\n", file = outfile,
append = TRUE)
cat(paste0("```", names(results[[i]]), "```",
"     |     ", results[[i]], collapse = "\n"),
file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
else {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat(results[[i]], file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
}
}
}
else {
warning("name and title are required. Not creating markdown file")
}
invisible(results)
}
Rd2markdown(rdfile = rdfile, outfile = outfile)
Rd2markdown(rdfile = rdfile, outfile = outfile)
parseRd <- function (rd, link.ext)
{
if (!("Rd" %in% class(rd)))
stop("Please provide Rd object to parse.")
tags <- Rd2md:::RdTags(rd)
results <- list()
if (!("\\name" %in% tags)) {
return(results)
}
for (i in sections) {
if (i %in% tags) {
if (i == "\\arguments") {
args <- rd[[which(tags == "\\arguments")]]
args.tags <- Rd2md:::RdTags(args)
args <- args[which(args.tags == "\\item")]
params <- character()
for (i in seq_along(args)) {
param.name <- as.character(args[[i]][[1]])
param.desc <- paste(sapply(args[[i]][[2]],
FUN = function(x) {
Rd2md:::parseTag(x, link.ext = link.ext)
}), collapse = " ")
params <- c(params, param.desc)
names(params)[length(params)] <- param.name
}
results$arguments <- params
}
else if (i %in% c("\\usage")) {
results[["usage"]] <- paste0("```r\n", paste(sapply(rd[[which(tags ==
"\\usage")]], FUN = function(x) {
if (x[1] == "\n")
x[1] = ""
Rd2md:::parseTag(x, stripNewline = FALSE, stripWhite = FALSE,
stripTab = FALSE, link.ext = link.ext)
}), collapse = ""), "```\n")
}else if (i %in% c("\\examples")) {
results[["examples"]] <- paste0("```r\n",sapply(rd[[which(tags ==
"\\examples")]], FUN = function(x) {
if (x[1] == "\n")
x[1] = ""
f <<- Rd2md:::parseTag(x, stripNewline = T, stripWhite = F,
stripTab = FALSE, link.ext = link.ext)
print(f)
f
}), "```\n")
}
else if (i %in% tags) {
key <- substr(i, 2, nchar(i))
results[[key]] <- paste(sapply(rd[[which(tags ==
i)[1]]], FUN = function(x) {
Rd2md:::parseTag(x, stripNewline = FALSE, link.ext = link.ext)
}), collapse = " ")
}
}
}
invisible(results)
}
Rd2markdown <- function (rdfile, outfile, append = FALSE)
{
append = as.logical(append)
if (length(append) != 1)
stop("Please provide append as single logical value.")
rdfile = as.character(rdfile)
if (length(rdfile) != 1)
stop("Please provide rdfile as single character value (file path with extension).")
outfile = as.character(outfile)
if (length(outfile) != 1)
stop("Please provide outfile as single character value (file path with extension).")
if (append) {
if (!file.exists(outfile))
stop("If append=TRUE, the outfile must exists already.")
}
file.ext <- "md"
link.ext <- "html"
section <- "#"
subsection <- "##"
section.sep <- "\n\n"
run.examples <- FALSE
rd <<- tools:::parse_Rd(rdfile)
results <- parseRd(rd)
if (all(c("name", "title") %in% names(results))) {
filename <- paste0(results$name, ".", file.ext)
results$filename <- filename
results$directory <- dirname(outfile)
cat("", file = outfile, append = append)
cat(paste0(section, " `", results$name, "`: ", results$title),
file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
for (i in sections.print[!sections.print %in% c("name",
"title")]) {
if (i %in% names(results)) {
if (i == "examples") {
cat(paste(subsection, "Examples"), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
a <<- results$examples
cat("```  ", paste(results$examples, collapse = "\n"),
"```", "  ", file = outfile, append = TRUE)
}
else if (i %in% c("usage")) {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat(paste0(results[[i]]), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
else if (i %in% c("arguments")) {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat("Argument      |Description\n", file = outfile,
append = TRUE)
cat("------------- |----------------\n", file = outfile,
append = TRUE)
cat(paste0("```", names(results[[i]]), "```",
"     |     ", results[[i]], collapse = "\n"),
file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
else {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat(results[[i]], file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
}
}
}
else {
warning("name and title are required. Not creating markdown file")
}
invisible(results)
}
Rd2markdown(rdfile = rdfile, outfile = outfile)
parseRd <- function (rd, link.ext)
{
if (!("Rd" %in% class(rd)))
stop("Please provide Rd object to parse.")
tags <- Rd2md:::RdTags(rd)
results <- list()
if (!("\\name" %in% tags)) {
return(results)
}
for (i in sections) {
if (i %in% tags) {
if (i == "\\arguments") {
args <- rd[[which(tags == "\\arguments")]]
args.tags <- Rd2md:::RdTags(args)
args <- args[which(args.tags == "\\item")]
params <- character()
for (i in seq_along(args)) {
param.name <- as.character(args[[i]][[1]])
param.desc <- paste(sapply(args[[i]][[2]],
FUN = function(x) {
Rd2md:::parseTag(x, link.ext = link.ext)
}), collapse = " ")
params <- c(params, param.desc)
names(params)[length(params)] <- param.name
}
results$arguments <- params
}
else if (i %in% c("\\usage")) {
results[["usage"]] <- paste0("```r\n", paste(sapply(rd[[which(tags ==
"\\usage")]], FUN = function(x) {
if (x[1] == "\n")
x[1] = ""
Rd2md:::parseTag(x, stripNewline = FALSE, stripWhite = FALSE,
stripTab = FALSE, link.ext = link.ext)
}), collapse = ""), "```\n")
}else if (i %in% c("\\examples")) {
results[["examples"]] <- paste0(sapply(rd[[which(tags ==
"\\examples")]], FUN = function(x) {
if (x[1] == "\n")
x[1] = ""
f <<- Rd2md:::parseTag(x, stripNewline = T, stripWhite = F,
stripTab = FALSE, link.ext = link.ext)
print(f)
f
}))
}
else if (i %in% tags) {
key <- substr(i, 2, nchar(i))
results[[key]] <- paste(sapply(rd[[which(tags ==
i)[1]]], FUN = function(x) {
Rd2md:::parseTag(x, stripNewline = FALSE, link.ext = link.ext)
}), collapse = " ")
}
}
}
invisible(results)
}
Rd2markdown <- function (rdfile, outfile, append = FALSE)
{
append = as.logical(append)
if (length(append) != 1)
stop("Please provide append as single logical value.")
rdfile = as.character(rdfile)
if (length(rdfile) != 1)
stop("Please provide rdfile as single character value (file path with extension).")
outfile = as.character(outfile)
if (length(outfile) != 1)
stop("Please provide outfile as single character value (file path with extension).")
if (append) {
if (!file.exists(outfile))
stop("If append=TRUE, the outfile must exists already.")
}
file.ext <- "md"
link.ext <- "html"
section <- "#"
subsection <- "##"
section.sep <- "\n\n"
run.examples <- FALSE
rd <<- tools:::parse_Rd(rdfile)
results <- parseRd(rd)
if (all(c("name", "title") %in% names(results))) {
filename <- paste0(results$name, ".", file.ext)
results$filename <- filename
results$directory <- dirname(outfile)
cat("", file = outfile, append = append)
cat(paste0(section, " `", results$name, "`: ", results$title),
file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
for (i in sections.print[!sections.print %in% c("name",
"title")]) {
if (i %in% names(results)) {
if (i == "examples") {
cat(paste(subsection, "Examples"), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
a <<- results$examples
cat("```  ", paste(results$examples, collapse = "\n"),
"```", "  ", file = outfile, append = TRUE)
}
else if (i %in% c("usage")) {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat(paste0(results[[i]]), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
else if (i %in% c("arguments")) {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat("Argument      |Description\n", file = outfile,
append = TRUE)
cat("------------- |----------------\n", file = outfile,
append = TRUE)
cat(paste0("```", names(results[[i]]), "```",
"     |     ", results[[i]], collapse = "\n"),
file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
else {
cat(paste(subsection, Rd2md:::simpleCap(i)), file = outfile,
append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
cat(results[[i]], file = outfile, append = TRUE)
cat(section.sep, file = outfile, append = TRUE)
}
}
}
}
else {
warning("name and title are required. Not creating markdown file")
}
invisible(results)
}
Rd2markdown(rdfile = rdfile, outfile = outfile)
stri_join_list(stri_extract_all_words(c("Lorem ipsum dolor sit amet.",
"You're gonna get away with this.")), sep=", ")
stringi:::stri_join_list(stri_extract_all_words(c("Lorem ipsum dolor sit amet.",
"You're gonna get away with this.")), sep=", ")
install.packages("stringi")
install.packages("stringi")
stringi:::stri_join_list(stri_extract_all_words(c("Lorem ipsum dolor sit amet.",
"You're gonna get away with this.")), sep=", ")
stringi:::stri_join_list((c("Lorem ipsum dolor sit amet.",
"You're gonna get away with this.")), sep=", ")
